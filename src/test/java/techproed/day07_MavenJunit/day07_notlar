package techproed.day07_Maven_Junit;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import java.time.Duration;
/*
JUnit, TestNG ve Cucumber birer framework'durlar.

Junit maven projesi uzerinde calistigindan https://
mvnrepository.com/ sitesinden dependency'leri
projemize ekleriz.
❖ Test'lerimizi yaparken main method, if-else gibi
java kod bloklarini kullanmak yerine Junit
annotationlarini ve method'larine kullanabiliriz.

Annotations

Selenium'da kodlarimizi yazarken "@" işareti ile baslayan notasyonlar kullaniriz.
❖ Java Annotationlar ile derleyiciye (Compiler) talimatlar verebiliriz.
❖ Annotation, bir veri hakkında bilgi barındıran veriyi sağlayan basit bir yapıdır. Bu
sağladığı bilgiye de "metadata" denir.

En cok kullanilan Junit annotation'lari
@Test
@BeforeClass @AfterClass
@Before , @After
@Ignore

Yazdığımız bazı test metotları henüz tamamlanmamış veya değişikliklere
uğrayabileceğinden dolayı test sırasında çalıştırılmasını istemiyorsak @Ignore
notasyonu eklememiz yeterlidir.

Before notasyonu, her test method'undan önce çalışır. Örneğin bir sayfa ile test
yapiyorsak
ve her testten once o sayfaya gitmemiz gerekiyorsa @before kullanabiliriz.
@before notasyanunun kullanildigi method'a genelde setup( ) ismi verilir.
❖ After notasyonu, her test method'undan sonra çalışmaktadır. Örneğin test sirasinda
kullandigimiz sayfanin kapatilmasi gibi.
@after notasyanunun kullanildigi metoda genelde teardown() ismi verilir

Test method'u ve Test farkli yapilardir.
Test dedigimizde tek bir method veya icinde bircok class ve package barindiran
bir yapi olabilir. Regression test, smoke test vb..
Test method'u ise @Test notasyonu kullanilarak olusturulan ve bagimsiz olarak
calistirabilecegimiz en kucuk test yapisidir
BeforeClass notasyonu, bir class'daki tüm testlerden once yapılması gereken bir islem
işlem varsa kullanılır (precondition).
Örneğin test metotlarımız çalışmadan driver olusturup tum methodlarda kullanabilirim.
❖ AfterClass notasyonu da, bir class'daki tüm testler tamamlandıktan sonra yapılması
gereken işlemlerde kullanılır.
Örneğin actigimiz sayfayi kapatmak veya elde ettigimiz test sonuclarini raporlamak gibi.
❖ @BeforeClass ve @AfterClass notasyonları test sürecinde bir kere çalışırken, @Before
ve
@After notasyonları her test method'unun başında ve sonunda çalışmaktadır.

 */

public class C02_BeforeAfter {


    @Test
    public void test01() {  //manual olarak yazabiliriz ya da sag click yapin, Generate'den Test Method'u seceriz
        //bu hazir bir test methodu olusturur.

        //her test methodumuz icine Chrome ayarlarimizi yaziyoruz
        WebDriverManager.chromedriver().setup();
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));

        driver.get("https://techproeducation.com");

        driver.close();

    }
    //Biz her testimizi ayri ayri calistirabiliriz. Test02'yi calistirmak istersek, o methodun yanindaki run butonuna
    //basariz. Yani test seviyesinde calistiririz. Boylece test01 calismaz, test02 calisir. Test01'i claistirmak istersek
    //yanindaki run butonuna tiklayinca run test01'i seceriz.
    //Tum testleri calistirmak istersek class seviyesinde run yapariz. Bu durumda once yukaridakinden baslayarak
    //calistirma yapar. Biz alttaki method ismini test01, usttekini test02 yapsaydik o zaman once altta olmasina ragmen
    //test01'i calistirir. Cunku rakam olarak daha onde
    @Test
    public void test02() {

        WebDriverManager.chromedriver().setup();
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));

        driver.get("https://amazon.com");

        driver.close();

    }
}


package techproed.day07_Maven_Junit;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class C03_BeforeAfter {
    //Javadaki gibi yukaridan asagiya dogru bir calisma sistemi vardir. Once yukaridaki calisir, ancak burada oncelikli olma durumlari
    //dikkate alinir. Ornegin, after once before sonra yazilmis olsun. Yukarida after'i gorur ve asagiya inmeye devam edip before var mi
    //diye bakar. Befor'u gorurse once onu calistirir.

    //JUnit framework'unda testlerimizi siralamak icin extra bir notasyon yoktur. Eger belli bir siralamada calistirmak
    //istersek method isimlerini alfabetik veya sayisal olarak belirtmemiz gerekir. Ornegin Test01 Test02 methodlarindan
    //asagida da kalsa Test01'i calistirilir.

    @Before
    public void setUp() throws Exception {  //Genarete'den setup methodu secince bu method otomatik olarak yazildi
        System.out.println("Her test methodu öncesi bir kez calısır");
    }

    @After
    public void tearDown() throws Exception { //Genarate'den TearDown Methodu sectik ve bu method otomatik olarak yazildi

        System.out.println("Her test methodu sonrası bir kez calısır");
    }
     //Biz @After methodunu @Before'un ustunde olusturabilirdik.
    @Test
    public void test01() {//test methodu olusturmak istersek Genarate'den test'i seceriz.

        System.out.println("ilk test");

    }


    @Test
    public void test02() {

        System.out.println("ikinci test");

    }

    // Methodlari yukaridan asagiya dogru once @After, sonra iki @Before methodu ve iki Test methodunu siraladigimizda
    //once Before methodlari, sonra Test methodlari ve sonra @After methodu calisir. Concole'da cikan yazilardan bu sekilde
    //calistigini anlariz.

    //Class seviyesinde calistirma yaparsak tum methodlarimiz calisir. Test seviyesinde yani test methodunun yanindaki run
    //tusuna basarak calistirmayi yaparsak sadece o test calisir.

    /* Interview sorusu:
    Diyelimki bir class'da bir tane @BeforeClass bir tane @AfterClass, bir tane @Before, bir tane @After
    uc @Test var.Bu class'da kac method calisir?

    Clasimizi calistirdik. Uc test methodumuz var. Once bakilacak @BeforeClass varsa @BeforeClass methodu bir kere calisir.
    Sonra ilk test methodumuzun ilk satiri @Before methodu ile calisacak. Daha sonra System.out.print() kismi yani test
    methodumuz calisacak ve test methodumuzun body'si icinde System.out.print() altindaki kisim @After methodu ile
    calisacak. Kalan iki test methodu birinci test methodundaki gibi uc kez calisacak yani uc method calismis olacak.
    Bu durumda uc testimizde toplamda 9 method calismis olur. Ayrica son olarak @AfterClass methodu bir kere calisir.
    9 methodumuz calismisti, bir tane @BeforeClass ve bir tane @AfterClass methodu da eklenince toplam 11 method calisir.




     */

}

package techproed.day07_Maven_Junit;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.*;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import java.time.Duration;
public class C04_BeforeAfter {
   //Erol Hoca'nin 05-06-2023 tarihli C03_BeforeAfter Class'indan



        WebDriver driver; //Once class level'inda objemizi olusturduk.
        @Before
        public void setUp() throws Exception {
            WebDriverManager.chromedriver().setup();
            driver = new ChromeDriver();
            driver.manage().window().maximize();
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
        }    //Bu kisimda ise son olarak @After calisacak

        @Test
        public void test1() {  //Bu kismda once @Before calisacak. @Before methodu icinde yaptigimiz ayarlarla baslayacak
            driver.get("https://amazon.com"); //Bu kisimda Test methodumuz calisacak
        }
        @Test
        public void test2() {
            driver.get("https://techproeducation.com");
        }
        //Test methodularimizin isimleri a ve b iken once a olan, methodlarimiz test1 test2 iken once test1 calisti.

        @After
        public void tearDown() throws Exception {
            driver.close();
        }

        @BeforeClass
        public static void beforeClass() throws Exception {
            System.out.println("Her classtan önce bir kez çalışır");
        }

        @AfterClass
        public static void afterClass() throws Exception {
            System.out.println("Her classtan sonra bir kez çalışır");
        } //@AfterClass ile raporlama yapacagiz, ancak onu sonra gorecegiz.
    }